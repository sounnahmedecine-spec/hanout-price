{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile in the Hanout Price application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProfile entity."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number."
        },
        "socialNetworkId": {
          "type": "string",
          "description": "User's ID from a social network provider (if applicable)."
        },
        "username": {
          "type": "string",
          "description": "User's username."
        },
        "badges": {
          "type": "array",
          "description": "References to Badge. (Relationship: UserProfile 1:N Badge)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "username"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product listed in the Hanout Price application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Product entity."
        },
        "barcode": {
          "type": "string",
          "description": "The barcode of the product."
        },
        "name": {
          "type": "string",
          "description": "The name of the product."
        },
        "description": {
          "type": "string",
          "description": "A description of the product."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "PriceRecord": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PriceRecord",
      "type": "object",
      "description": "Represents a price record for a product at a specific location.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the PriceRecord entity."
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N PriceRecord)"
        },
        "shopId": {
          "type": "string",
          "description": "Reference to Shop. (Relationship: Shop 1:N PriceRecord)"
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N PriceRecord)"
        },
        "price": {
          "type": "number",
          "description": "The price of the product at the shop."
        },
        "dateRecorded": {
          "type": "string",
          "description": "The date and time when the price was recorded.",
          "format": "date-time"
        },
        "source": {
          "type": "string",
          "description": "The client application from which the record was submitted.",
          "enum": [ "WEB_NEXTJS", "CAPACITOR_ANDROID", "FLUTTER_ANDROID", "WINDOWS_DESKTOP"
          ]
        }
      },
      "required": [
        "id",
        "productId",
        "shopId",
        "userId",
        "price",
        "dateRecorded"
      ]
    },
    "Shop": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Shop",
      "type": "object",
      "description": "Represents a shop or hanout where products are sold.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Shop entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the shop."
        },
        "latitude": {
          "type": "number",
          "description": "The latitude coordinate of the shop's location."
        },
        "longitude": {
          "type": "number",
          "description": "The longitude coordinate of the shop's location."
        }
      },
      "required": [
        "id",
        "name",
        "latitude",
        "longitude"
      ]
    },
    "Badge": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Badge",
      "type": "object",
      "description": "Represents a badge that can be awarded to users.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Badge entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the badge (e.g., 'Super Contributor')."
        },
        "description": {
          "type": "string",
          "description": "A description of what the badge represents."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the badge image.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "imageUrl"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/userProfile",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. Only the user can read and write their own profile. Includes denormalized 'userId'.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product information. Public read access.",
          "params": [
            {
              "name": "productId",
              "description": "The unique identifier of the product."
            }
          ]
        }
      },
      {
        "path": "/shops/{shopId}",
        "definition": {
          "entityName": "Shop",
          "schema": {
            "$ref": "#/backend/entities/Shop"
          },
          "description": "Stores shop information. Public read access.",
          "params": [
            {
              "name": "shopId",
              "description": "The unique identifier of the shop."
            }
          ]
        }
      },
      {
        "path": "/price_records/{priceRecordId}",
        "definition": {
          "entityName": "PriceRecord",
          "schema": {
            "$ref": "#/backend/entities/PriceRecord"
          },
          "description": "Stores price records for products at shops. Includes denormalized 'userId', 'shopId' and 'productId' for authorization independence.",
          "params": [
            {
              "name": "priceRecordId",
              "description": "The unique identifier of the price record."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support the Hanout Price application's features, focusing on user-generated price records for products in local shops. To ensure security and scalability, we employ denormalization to avoid complex security rules and maintain data integrity. Authorization independence is achieved by denormalizing relevant authorization data (e.g., user IDs) directly into the `PriceRecord` documents, eliminating the need for `get()` calls in security rules. This facilitates atomic operations (transactions/batches) and simplifies debugging. Structural segregation is used to ensure that all documents in a collection share the same security requirements.\n\nSpecifically:\n\n*   `/users/{userId}/userProfile`:  Stores user profiles. This path-based ownership ensures only the user can read and write their profile data.\n*   `/products/{productId}`: Stores product information.  This collection can be read by everyone but write access is restricted.\n*   `/shops/{shopId}`: Stores shop information.  This collection can be read by everyone but write access is restricted.\n*   `/price_records/{priceRecordId}`: Stores price records.  The `userId` and `shopId` are stored in each document to ensure authorization independence for read and write operations. This allows users to create, read, update, and delete their own price records. Shop owners or admins could potentially have write access to price records for their shops by implementing a role-based system (e.g., storing shop owner IDs in the `shops` document and checking against the `userId` in the `PriceRecord` security rules).  The `productId` is stored in each document to facilitate querying and filtering of price records by product.\n\nThis structure supports the application's core features, including account management, product scanning, manual price addition, advanced search, and geolocation, while adhering to the principles of authorization independence, clarity, and scalability."
  }
}