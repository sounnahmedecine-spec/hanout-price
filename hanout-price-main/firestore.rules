/**
 * @fileoverview Firestore Security Rules for Hanout Price application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user ownership and public read access for products and shops.
 * Price records are secured to allow users to manage their own entries.
 *
 * Data Structure:
 * - /users/{userId}: User-specific profile information.
 * - /products/{productId}: Public product information.
 * - /shops/{shopId}: Public shop information.
 * - /priceRecords/{priceRecordId}: Price records with denormalized userId, shopId, and productId.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles.
 * - Products and shops are publicly readable but not writable in this prototype.
 * - Price records are user-owned, allowing creation, reading, updating, and deletion by the owner.
 * - Listing is allowed for owners, restricted by userId filtering.
 */

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * ============================
     * üë§ USER PROFILES
     * ============================
     * Chaque utilisateur peut g√©rer son propre profil.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
        return request.auth.uid == userId;
      }

      // üîì En dev : on autorise aussi la lecture de tous les profils pour simplifier les tests
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;
      allow update, delete: if isOwner();
    }

    /**
     * ============================
     * üì¶ PRODUCTS (Public Read)
     * ============================
     */
    match /products/{productId} {
      allow read, list: if true;  // üîì Lecture publique
      allow create, update, delete: if request.auth != null; // ‚úÖ Autoriser temporairement les √©critures pendant le dev
    }

    /**
     * ============================
     * üè¨ SHOPS (Public Read)
     * ============================
     */
    match /shops/{shopId} {
      allow read, list: if true;  // üîì Lecture publique
      allow create, update, delete: if request.auth != null; // ‚úÖ √âcritures autoris√©es temporairement
    }

    /**
     * ============================
     * üí∞ PRICE RECORDS (User-Owned)
     * ============================
     * Mode dev : autorise les requ√™tes tant que l'utilisateur est connect√©.
     * Cela √©vite les erreurs "Missing or insufficient permissions" pendant les tests.
     */
    match /priceRecords/{priceRecordId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow read, list, create, update, delete: if isSignedIn();
      // üîì En dev, tout utilisateur connect√© peut acc√©der √† ses donn√©es.
      // ‚ö†Ô∏è √Ä restreindre avant la mise en production.
    }
  }
}
